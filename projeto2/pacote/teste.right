@.formatting.string = private constant [4 x i8] c"%d\0A\00"
define i32 @main() {
entry0:
  %tmp3 = alloca i32
  store i32 0, i32 * %tmp3
  %tmp8 = mul i32 8, 1
  %tmp9 = call i8* @malloc ( i32 %tmp8)
  %tmp7 = bitcast i8* %tmp9 to %class.b*
  %tmp6 = call i32  @__m_b(%class.b * %tmp7)
  %tmp10 = getelementptr [4 x i8] * @.formatting.string, i32 0, i32 0
  %tmp11 = call i32 (i8 *, ...)* @printf(i8 * %tmp10, i32 %tmp6)
  %tmp12 = load i32 * %tmp3
  ret i32 %tmp12
}
%struct.array = type { i32, i32 * }
%class.b = type { %struct.array * }
define i32 @__m_b(%class.b * %this) {
entry0:
  %c = alloca %struct.array *
  %tmp14 = mul i32 12, 1
  %tmp15 = call i8* @malloc ( i32 %tmp14)
  %tmp13 = bitcast i8* %tmp15 to %struct.array*
  %tmp17 = mul i32 4, 7
  %tmp18 = call i8* @malloc ( i32 %tmp17)
  %tmp16 = bitcast i8* %tmp18 to i32*
  %tmp19 = getelementptr %struct.array * %tmp13, i32 0, i32 1
  store i32 * %tmp16, i32 * * %tmp19
  %tmp20 = getelementptr %struct.array * %tmp13, i32 0, i32 0
  store i32 7, i32 * %tmp20
  store %struct.array * %tmp13, %struct.array * * %c
  %tmp21 = add i32 1, 2
  %tmp99 = load %struct.array * * %c
  %tmp22 = getelementptr %struct.array * %tmp99, i32 0, i32 1
  %tmp98 = load i32 * * %tmp22
  %tmp97 = getelementptr i32 * %tmp98, i32 3
  store i32 45, i32 * %tmp97
  %tmp96 = load i32 * %tmp97
  ret i32 %tmp96
}
declare i32 @printf (i8 *, ...)
declare i8 * @malloc (i32)
